{"version":3,"file":"index.js","sources":["../src/logger.js","../src/MatchResult.js","../src/Route.js","../src/Router.js"],"sourcesContent":["import Logger from '@hello10/logger';\n\nconst logger = new Logger('groutcho');\n\nexport default logger;\n","export default class MatchResult {\n  constructor ({\n    input,\n    route = null,\n    url = null,\n    params = {},\n    redirect = false\n  }) {\n    this.input = input;\n    this.route = route;\n    this.params = params;\n    this.redirect = redirect;\n    this.original = null;\n    this.url = url || route.buildUrl(params);\n  }\n\n  isRedirect ({original}) {\n    this.redirect = true;\n    this.original = original;\n  }\n}\n","import Url from 'url';\nimport Querystring from 'querystring';\nimport {pathToRegexp, compile} from 'path-to-regexp';\n\nimport MatchResult from './MatchResult';\n\nexport default class Route {\n  /**\n   * Represents a route\n   * @constructor\n   * @param {string} name - Name for the route.\n   * @param {string} pattern - Pattern used by path-to-regexp to match route.\n   * @param {Object} page - Page to be returned along with params for this route.\n   */\n  constructor (params) {\n    const required_params = ['name', 'pattern', 'page'];\n    for (const param of required_params) {\n      if (!(param in params)) {\n        throw new Error(`Missing route param ${param}`);\n      }\n    }\n\n    // Allow for dynamic params in routes to be used with\n    // custom redirects etc.\n    for (const [k, v] of Object.entries(params)) {\n      if (['is', 'match', 'buildUrl'].includes(k)) {\n        throw new Error(`Invalid route param ${k}`);\n      }\n      this[k] = v;\n    }\n\n    // create matcher for this route (uses path-to-regexp)\n    const options = {\n      sensitive: false,\n      strict: false,\n      end: true\n    };\n    this._param_keys = [];\n    this._matcher = pathToRegexp(this.pattern, this._param_keys, options);\n  }\n\n  /**\n  * Check whether this route matches a passed path or route.\n  * @return {MatchedRoute}\n  */\n  // you can either pass a path to match\n  match (args) {\n    const fn_name = `_match${args.url ? 'Url' : 'Route'}`;\n    return this[fn_name](args);\n  }\n\n  is (test) {\n    if (test.indexOf('/') !== -1) {\n      return !!this._matcher.exec(test);\n    } else {\n      return (this.name === test);\n    }\n  }\n\n  _matchUrl (input) {\n    const {url} = input;\n\n    const {\n      query: query_params,\n      pathname: path\n    } = Url.parse(url, true);\n\n    const match = this._matcher.exec(path);\n    if (!match) {\n      return false;\n    }\n\n    const route_params = this._getParamsFromMatch(match);\n    const params = {...route_params, ...query_params};\n\n    return new MatchResult({\n      route: this,\n      input,\n      params\n    });\n  }\n\n  // matches if\n  // 1) name matches\n  // 2) all named params are present\n  _matchRoute (input) {\n    const {route} = input;\n    const {name, params = {}} = route;\n\n    // Name of passed route must match this route's name\n    if (name !== this.name) {\n      return false;\n    }\n\n    const param_names = this._requiredParamNames();\n    const has_all_params = param_names.every((name)=> name in params);\n    if (!has_all_params) {\n      return false;\n    }\n\n    // All named params are present, its a match\n    return new MatchResult({\n      input,\n      route: this,\n      params\n    });\n  }\n\n  _getParamsFromMatch (match) {\n    const params = {};\n    const param_names = this._paramNames();\n\n    for (let i = 0; i < param_names.length; i++) {\n      // TODO: worth handling delim / repeat?\n      const {name, repeat, delimiter, optional} = this._param_keys[i];\n      const value = match[i + 1];\n      const defined = (value !== undefined);\n      let decoded = defined ? decodeURIComponent(value) : value;\n      if (repeat) {\n        decoded = decoded.split(delimiter);\n      }\n      if (defined || !optional) {\n        params[name] = decoded;\n      }\n    }\n\n    return params;\n  }\n\n  buildUrl (params = {}) {\n    let url = this._buildPath(params);\n    const query = this._buildQuery(params);\n    if (query.length) {\n      url = `${url}?${query}`;\n    }\n    return url;\n  }\n\n  _buildPath (params) {\n    const {pattern} = this;\n    const buildPath = compile(pattern);\n    return buildPath(params);\n  }\n\n  _buildQuery (params) {\n    const param_names = this._paramNames();\n\n    const query_params = {};\n    for (const [name, value] of Object.entries(params)) {\n      if (!param_names.includes(name)) {\n        query_params[name] = value;\n      }\n    }\n\n    return Querystring.stringify(query_params);\n  }\n\n  _paramNames () {\n    return this._param_keys.map((k)=> k.name);\n  }\n\n  _requiredParamNames () {\n    return this._param_keys\n      .filter((k)=> !k.optional)\n      .map((k)=> k.name);\n  }\n}\n","import type from 'type-of-is';\nimport {omitter} from '@hello10/util';\n\nimport logger from './logger';\nimport Route from './Route';\nimport MatchResult from './MatchResult';\n\nconst getExtra = omitter(['route', 'url']);\n\nexport default class Router {\n  constructor ({\n    routes,\n    redirects,\n    max_redirects = 10\n  }) {\n    this.routes = [];\n    this.addRoutes(routes);\n    this.max_redirects = max_redirects;\n\n    this.redirects = [];\n    for (const [name, test] of Object.entries(redirects)) {\n      this.redirects.push({name, test});\n    }\n\n    this.listeners = [];\n    logger.debug('Constructed router', this);\n  }\n\n  addRoutes (routes) {\n    const entries = Object.entries(routes);\n    for (const [name, config] of entries) {\n      config.name = name;\n      const route = new Route(config);\n      logger.debug('Adding route', route);\n      this.routes.push(route);\n    }\n  }\n\n  getRoute (query) {\n    return this.routes.find((route)=> {\n      return Object.entries(query).every(([k, v])=> {\n        return (route[k] === v);\n      });\n    });\n  }\n\n  getRouteByName (name) {\n    const route = this.getRoute({name});\n    if (!route) {\n      const msg = `No route named ${name}`;\n      logger.error(msg);\n      throw new Error(msg);\n    }\n    return route;\n  }\n\n  // match\n  // -----\n  // Checks whether there is a route matching the passed pathname\n  // If there is a match, returns the associated Page and matched params.\n  // If no match return NotFound\n  match (input) {\n    input = this._normalizeInput(input);\n    const extra = getExtra(input);\n    const original = this._match(input);\n    const redirect = this._checkRedirects({original, extra});\n    logger.debug('match', {input, original, redirect});\n    if (redirect) {\n      redirect.isRedirect({original});\n      return redirect;\n    } else {\n      return original;\n    }\n  }\n\n  _normalizeInput (input) {\n    switch (type(input)) {\n      case String:\n        if (input.indexOf('/') !== -1) {\n          return {url: input};\n        } else {\n          return {route: {name: input}};\n        }\n      case Object:\n        if (input.name) {\n          return {route: input};\n        } else {\n          return input;\n        }\n      default:\n        throw new Error('Invalid input');\n    }\n  }\n\n  _match (input) {\n    logger.debug('Attempting to match route', input);\n    // if passed full url, treat as redirect\n    const {url} = input;\n    if (url && url.match(/^https?:\\/\\//)) {\n      return new MatchResult({\n        redirect: true,\n        input,\n        url\n      });\n    }\n\n    let match = null;\n    for (const r of this.routes) {\n      match = r.match(input);\n      if (match) {\n        break;\n      }\n    }\n\n    return match;\n  }\n\n  _checkRedirects ({\n    original,\n    extra,\n    previous = null,\n    current = null,\n    num_redirects = 0,\n    history = []\n  }) {\n    logger.debug('Checking redirects', {original, extra, previous, current, num_redirects, history});\n    const {max_redirects} = this;\n    if (num_redirects >= max_redirects) {\n      const msg = `Number of redirects exceeded max_redirects (${max_redirects})`;\n      logger.error(msg);\n      throw new Error(msg);\n    }\n\n    function deepEqual (a, b) {\n      const {stringify} = JSON;\n      return (stringify(a) === stringify(b));\n    }\n\n    // if current is the same as original, then we've looped, so this shouldn't\n    // be a redirect\n    // TODO: improve cycle detection\n    if (current && previous) {\n      const same_route = (current.route === previous.route);\n      const same_params = deepEqual(current.params, previous.params);\n      if (same_route && same_params) {\n        logger.debug('Route is same as previous', {current, previous});\n        return previous;\n      }\n    }\n\n    if (!current) {\n      current = original;\n      history = [original];\n    }\n\n    if (current.redirect) {\n      return current;\n    }\n\n    let next = false;\n    if (current && current.route.redirect) {\n      next = current.route.redirect(current);\n    }\n\n    if (!next) {\n      for (const {test} of this.redirects) {\n        // test returns false if no redirect is needed\n        next = test(current);\n        if (next) {\n          break;\n        }\n      }\n    }\n\n    if (next) {\n      logger.debug('Got redirect', {current, next});\n      // we got a redirect\n      previous = current;\n      next = this._normalizeInput(next);\n      current = this._match({...next, ...extra});\n      if (!current) {\n        throw new Error(`No match for redirect result ${next}`);\n      }\n      history.push(current);\n      num_redirects++;\n      return this._checkRedirects({original, previous, current, num_redirects, history, extra});\n    } else if (num_redirects > 0) {\n      return current;\n    } else {\n      return false;\n    }\n  }\n\n  onGo (listener) {\n    this.listeners.push(listener);\n  }\n\n  go (input) {\n    const match = this.match(input);\n    for (const listener of this.listeners) {\n      listener(match);\n    }\n  }\n}\n"],"names":["logger","Logger","MatchResult","constructor","input","route","url","params","redirect","original","buildUrl","isRedirect","Route","required_params","param","Error","k","v","Object","entries","includes","options","sensitive","strict","end","_param_keys","_matcher","pathToRegexp","pattern","match","args","fn_name","is","test","indexOf","exec","name","_matchUrl","query","query_params","pathname","path","Url","parse","route_params","_getParamsFromMatch","_matchRoute","param_names","_requiredParamNames","has_all_params","every","_paramNames","i","length","repeat","delimiter","optional","value","defined","undefined","decoded","decodeURIComponent","split","_buildPath","_buildQuery","buildPath","compile","Querystring","stringify","map","filter","getExtra","omitter","Router","routes","redirects","max_redirects","addRoutes","push","listeners","debug","config","getRoute","find","getRouteByName","msg","error","_normalizeInput","extra","_match","_checkRedirects","type","String","r","previous","current","num_redirects","history","deepEqual","a","b","JSON","same_route","same_params","next","onGo","listener","go"],"mappings":"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"}