{"version":3,"file":"index.umd.js","sources":["../src/MatchResult.js","../src/Route.js","../src/Router.js"],"sourcesContent":["export default class MatchResult {\n  constructor ({\n    input,\n    route = null,\n    url = null,\n    params = {},\n    redirect = false\n  }) {\n    this.input = input;\n    this.route = route;\n    this.params = params;\n    this.redirect = redirect;\n    this.original = null;\n    this.url = url || route.buildUrl(params);\n  }\n\n  isRedirect ({original}) {\n    this.redirect = true;\n    this.original = original;\n  }\n}\n","import Url from 'url';\nimport Querystring from 'querystring';\nimport {pathToRegexp, compile} from 'path-to-regexp';\n\nimport MatchResult from './MatchResult';\n\nfunction decodeParam ({name, value}) {\n  try {\n    return decodeURIComponent(value);\n  } catch (_) {\n    throw new Error(`Invalid value for ${name}`);\n  }\n}\n\nexport default class Route {\n  /**\n   * Represents a route\n   * @constructor\n   * @param {string} name - Name for the route.\n   * @param {string} pattern - Pattern used by path-to-regexp to match route.\n   * @param {Object} page - Page to be returned along with params for this route.\n   */\n  constructor (params) {\n    const required_params = ['name', 'pattern', 'page'];\n    for (const param of required_params) {\n      if (!(param in params)) {\n        throw new Error(`Missing route param ${param}`);\n      }\n    }\n\n    // Allow for dynamic params in routes to be used with\n    // custom redirects etc.\n    for (const [k, v] of Object.entries(params)) {\n      if (['match', 'buildUrl'].includes(k)) {\n        throw new Error(`Invalid route param ${k}`);\n      }\n      this[k] = v;\n    }\n\n    // create matcher for this route (uses path-to-regexp)\n    const options = {\n      sensitive: false,\n      strict: false,\n      end: true\n    };\n    this._param_keys = [];\n    this._matcher = pathToRegexp(this.pattern, this._param_keys, options);\n  }\n\n  /**\n  * Check whether this route matches a passed path or route.\n  * @return {MatchedRoute}\n  */\n  // you can either pass a path to match\n  match (args) {\n    const fn_name = `_match${args.url ? 'Url' : 'Route'}`;\n    return this[fn_name](args);\n  }\n\n  is (test) {\n    if (test.indexOf('/') !== -1) {\n      return !!this._matcher.exec(test);\n    } else {\n      return (this.name === test);\n    }\n  }\n\n  _matchUrl (input) {\n    const {url} = input;\n\n    const {\n      query: query_params,\n      pathname: path\n    } = Url.parse(url, true);\n\n    const match = this._matcher.exec(path);\n    if (!match) {\n      return false;\n    }\n\n    const route_params = this._getParamsFromMatch(match);\n    const params = {...route_params, ...query_params};\n\n    return new MatchResult({\n      route: this,\n      input,\n      params\n    });\n  }\n\n  // matches if\n  // 1) name matches\n  // 2) all named params are present\n  _matchRoute (input) {\n    const {route} = input;\n    const {name, params = {}} = route;\n\n    // Name of passed route must match this route's name\n    if (name !== this.name) {\n      return false;\n    }\n\n    const param_names = this._requiredParamNames();\n    const has_all_params = param_names.every((name)=> name in params);\n    if (!has_all_params) {\n      return false;\n    }\n\n    // All named params are present, its a match\n    return new MatchResult({\n      input,\n      route: this,\n      params\n    });\n  }\n\n  _getParamsFromMatch (match) {\n    const params = {};\n    const param_names = this._paramNames();\n\n    for (let i = 0; i < param_names.length; i++) {\n      // TODO: worth handling delim / repeat?\n      const {name, repeat, delimiter, optional} = this._param_keys[i];\n      const value = match[i + 1];\n      const defined = (value !== undefined);\n      let decoded = defined ? decodeParam({name, value}) : value;\n      if (repeat) {\n        decoded = decoded.split(delimiter);\n      }\n      if (defined || !optional) {\n        params[name] = decoded;\n      }\n    }\n\n    return params;\n  }\n\n  buildUrl (params = {}) {\n    let url = this._buildPath(params);\n    const query = this._buildQuery(params);\n    if (query.length) {\n      url = `${url}?${query}`;\n    }\n    return url;\n  }\n\n  _buildPath (params) {\n    const {pattern} = this;\n    const buildPath = compile(pattern);\n    return buildPath(params);\n  }\n\n  _buildQuery (params) {\n    const param_names = this._paramNames();\n\n    const query_params = {};\n    for (const [name, value] of Object.entries(params)) {\n      if (!param_names.includes(name)) {\n        query_params[name] = value;\n      }\n    }\n\n    return Querystring.stringify(query_params);\n  }\n\n  _paramNames () {\n    return this._param_keys.map((k)=> k.name);\n  }\n\n  _requiredParamNames () {\n    return this._param_keys\n      .filter((k)=> !k.optional)\n      .map((k)=> k.name);\n  }\n}\n","import type from 'type-of-is';\n\nimport Route from './Route';\nimport MatchResult from './MatchResult';\n\nfunction omitter (keys) {\n  return function omit (obj) {\n    return Object.keys(obj).reduce((result, key)=> {\n      if (!keys.includes(key)) {\n        result[key] = obj[key];\n      }\n      return result;\n    }, {});\n  };\n}\n\nconst getExtra = omitter(['route', 'url']);\n\nexport default class Router {\n  constructor ({\n    routes,\n    redirects,\n    max_redirects = 10\n  }) {\n    this.routes = [];\n    this.addRoutes(routes);\n    this.max_redirects = max_redirects;\n\n    this.redirects = [];\n    for (const [name, test] of Object.entries(redirects)) {\n      this.redirects.push({name, test});\n    }\n\n    this.listeners = [];\n  }\n\n  addRoutes (routes) {\n    const entries = Object.entries(routes);\n    for (const [name, config] of entries) {\n      config.name = name;\n      const route = new Route(config);\n      this.routes.push(route);\n    }\n  }\n\n  getRoute (query) {\n    return this.routes.find((route)=> {\n      return Object.entries(query).every(([k, v])=> {\n        return (route[k] === v);\n      });\n    });\n  }\n\n  getRouteByName (name) {\n    const route = this.getRoute({name});\n    if (!route) {\n      throw new Error(`No route named ${name}`);\n    }\n    return route;\n  }\n\n  // match\n  // -----\n  // Checks whether there is a route matching the passed pathname\n  // If there is a match, returns the associated Page and matched params.\n  // If no match return NotFound\n  match (input) {\n    input = this._normalizeInput(input);\n    const extra = getExtra(input);\n    const original = this._match(input);\n    const redirect = this._checkRedirects({original, extra});\n    if (redirect) {\n      redirect.isRedirect({original});\n      return redirect;\n    } else {\n      return original;\n    }\n  }\n\n  _normalizeInput (input) {\n    switch (type(input)) {\n      case String:\n        if (input.indexOf('/') !== -1) {\n          return {url: input};\n        } else {\n          return {route: {name: input}};\n        }\n      case Object:\n        if (input.name) {\n          return {route: input};\n        } else {\n          return input;\n        }\n      default:\n        throw new Error('Invalid input');\n    }\n  }\n\n  _match (input) {\n    // if passed full url, treat as redirect\n    const {url} = input;\n    if (url && url.match(/^https?:\\/\\//)) {\n      return new MatchResult({\n        redirect: true,\n        input,\n        url\n      });\n    }\n\n    let match = null;\n    for (const r of this.routes) {\n      match = r.match(input);\n      if (match) {\n        break;\n      }\n    }\n\n    return match;\n  }\n\n  _checkRedirects ({\n    original,\n    extra,\n    previous = null,\n    current = null,\n    num_redirects = 0,\n    history = []\n  }) {\n    const {max_redirects} = this;\n    if (num_redirects >= max_redirects) {\n      throw new Error(`Number of redirects exceeded max_redirects (${max_redirects})`);\n    }\n\n    function deepEqual (a, b) {\n      const {stringify} = JSON;\n      return (stringify(a) === stringify(b));\n    }\n\n    // if current is the same as original, then we've looped, so this shouldn't\n    // be a redirect\n    // TODO: improve cycle detection\n    if (current && previous) {\n      const same_route = (current.route === previous.route);\n      const same_params = deepEqual(current.params, previous.params);\n      if (same_route && same_params) {\n        return previous;\n      }\n    }\n\n    if (!current) {\n      current = original;\n      history = [original];\n    }\n\n    if (current.redirect) {\n      return current;\n    }\n\n    let next = false;\n    if (current && current.route.redirect) {\n      next = current.route.redirect(current);\n    }\n\n    if (!next) {\n      for (const {test} of this.redirects) {\n        // test returns false if no redirect is needed\n        next = test(current);\n        if (next) {\n          break;\n        }\n      }\n    }\n\n    if (next) {\n      // we got a redirect\n      previous = current;\n      next = this._normalizeInput(next);\n      current = this._match({...next, ...extra});\n      if (!current) {\n        throw new Error(`No match for redirect result ${next}`);\n      }\n      history.push(current);\n      num_redirects++;\n      return this._checkRedirects({original, previous, current, num_redirects, history, extra});\n    } else if (num_redirects > 0) {\n      return current;\n    } else {\n      return false;\n    }\n  }\n\n  onChange (listener) {\n    this.listeners.push(listener);\n  }\n\n  go (input) {\n    const match = this.match(input);\n    const {url} = match;\n    for (const listener of this.listeners) {\n      listener(url);\n    }\n  }\n}\n"],"names":["MatchResult","constructor","input","route","url","params","redirect","original","buildUrl","isRedirect","decodeParam","name","value","decodeURIComponent","_","Error","Route","required_params","param","k","v","Object","entries","includes","options","sensitive","strict","end","_param_keys","_matcher","pathToRegexp","pattern","match","args","fn_name","is","test","indexOf","exec","_matchUrl","query","query_params","pathname","path","Url","parse","route_params","_getParamsFromMatch","_matchRoute","param_names","_requiredParamNames","has_all_params","every","_paramNames","i","length","repeat","delimiter","optional","defined","undefined","decoded","split","_buildPath","_buildQuery","buildPath","compile","Querystring","stringify","map","filter","omitter","keys","omit","obj","reduce","result","key","getExtra","Router","routes","redirects","max_redirects","addRoutes","push","listeners","config","getRoute","find","getRouteByName","_normalizeInput","extra","_match","_checkRedirects","type","String","r","previous","current","num_redirects","history","deepEqual","a","b","JSON","same_route","same_params","next","onChange","listener","go"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;EAAe,MAAMA,WAAN,CAAkB;EAC/BC,EAAAA,WAAW,CAAE;EACXC,IAAAA,KADW;EAEXC,IAAAA,KAAK,GAAG,IAFG;EAGXC,IAAAA,GAAG,GAAG,IAHK;EAIXC,IAAAA,MAAM,GAAG,EAJE;EAKXC,IAAAA,QAAQ,GAAG;EALA,GAAF,EAMR;EACD,SAAKJ,KAAL,GAAaA,KAAb;EACA,SAAKC,KAAL,GAAaA,KAAb;EACA,SAAKE,MAAL,GAAcA,MAAd;EACA,SAAKC,QAAL,GAAgBA,QAAhB;EACA,SAAKC,QAAL,GAAgB,IAAhB;EACA,SAAKH,GAAL,GAAWA,GAAG,IAAID,KAAK,CAACK,QAAN,CAAeH,MAAf,CAAlB;EACD;;EAEDI,EAAAA,UAAU,CAAE;EAACF,IAAAA;EAAD,GAAF,EAAc;EACtB,SAAKD,QAAL,GAAgB,IAAhB;EACA,SAAKC,QAAL,GAAgBA,QAAhB;EACD;;EAnB8B;;ECMjC,SAASG,WAAT,CAAsB;EAACC,EAAAA,IAAD;EAAOC,EAAAA;EAAP,CAAtB,EAAqC;EACnC,MAAI;EACF,WAAOC,kBAAkB,CAACD,KAAD,CAAzB;EACD,GAFD,CAEE,OAAOE,CAAP,EAAU;EACV,UAAM,IAAIC,KAAJ,CAAW,qBAAoBJ,IAAK,EAApC,CAAN;EACD;EACF;;AAED,EAAe,MAAMK,KAAN,CAAY;EAQzBf,EAAAA,WAAW,CAAEI,MAAF,EAAU;EACnB,UAAMY,eAAe,GAAG,CAAC,MAAD,EAAS,SAAT,EAAoB,MAApB,CAAxB;;EACA,SAAK,MAAMC,KAAX,IAAoBD,eAApB,EAAqC;EACnC,UAAI,EAAEC,KAAK,IAAIb,MAAX,CAAJ,EAAwB;EACtB,cAAM,IAAIU,KAAJ,CAAW,uBAAsBG,KAAM,EAAvC,CAAN;EACD;EACF;;EAID,SAAK,MAAM,CAACC,CAAD,EAAIC,CAAJ,CAAX,IAAqBC,MAAM,CAACC,OAAP,CAAejB,MAAf,CAArB,EAA6C;EAC3C,UAAI,CAAC,OAAD,EAAU,UAAV,EAAsBkB,QAAtB,CAA+BJ,CAA/B,CAAJ,EAAuC;EACrC,cAAM,IAAIJ,KAAJ,CAAW,uBAAsBI,CAAE,EAAnC,CAAN;EACD;;EACD,WAAKA,CAAL,IAAUC,CAAV;EACD;;EAGD,UAAMI,OAAO,GAAG;EACdC,MAAAA,SAAS,EAAE,KADG;EAEdC,MAAAA,MAAM,EAAE,KAFM;EAGdC,MAAAA,GAAG,EAAE;EAHS,KAAhB;EAKA,SAAKC,WAAL,GAAmB,EAAnB;EACA,SAAKC,QAAL,GAAgBC,yBAAY,CAAC,KAAKC,OAAN,EAAe,KAAKH,WAApB,EAAiCJ,OAAjC,CAA5B;EACD;;EAODQ,EAAAA,KAAK,CAAEC,IAAF,EAAQ;EACX,UAAMC,OAAO,GAAI,SAAQD,IAAI,CAAC7B,GAAL,GAAW,KAAX,GAAmB,OAAQ,EAApD;EACA,WAAO,KAAK8B,OAAL,EAAcD,IAAd,CAAP;EACD;;EAEDE,EAAAA,EAAE,CAAEC,IAAF,EAAQ;EACR,QAAIA,IAAI,CAACC,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA3B,EAA8B;EAC5B,aAAO,CAAC,CAAC,KAAKR,QAAL,CAAcS,IAAd,CAAmBF,IAAnB,CAAT;EACD,KAFD,MAEO;EACL,aAAQ,KAAKzB,IAAL,KAAcyB,IAAtB;EACD;EACF;;EAEDG,EAAAA,SAAS,CAAErC,KAAF,EAAS;EAChB,UAAM;EAACE,MAAAA;EAAD,QAAQF,KAAd;EAEA,UAAM;EACJsC,MAAAA,KAAK,EAAEC,YADH;EAEJC,MAAAA,QAAQ,EAAEC;EAFN,QAGFC,GAAG,CAACC,KAAJ,CAAUzC,GAAV,EAAe,IAAf,CAHJ;;EAKA,UAAM4B,KAAK,GAAG,KAAKH,QAAL,CAAcS,IAAd,CAAmBK,IAAnB,CAAd;;EACA,QAAI,CAACX,KAAL,EAAY;EACV,aAAO,KAAP;EACD;;EAED,UAAMc,YAAY,GAAG,KAAKC,mBAAL,CAAyBf,KAAzB,CAArB;;EACA,UAAM3B,MAAM,gBAAOyC,YAAP,EAAwBL,YAAxB,CAAZ;;EAEA,WAAO,IAAIzC,WAAJ,CAAgB;EACrBG,MAAAA,KAAK,EAAE,IADc;EAErBD,MAAAA,KAFqB;EAGrBG,MAAAA;EAHqB,KAAhB,CAAP;EAKD;;EAKD2C,EAAAA,WAAW,CAAE9C,KAAF,EAAS;EAClB,UAAM;EAACC,MAAAA;EAAD,QAAUD,KAAhB;EACA,UAAM;EAACS,MAAAA,IAAD;EAAON,MAAAA,MAAM,GAAG;EAAhB,QAAsBF,KAA5B;;EAGA,QAAIQ,IAAI,KAAK,KAAKA,IAAlB,EAAwB;EACtB,aAAO,KAAP;EACD;;EAED,UAAMsC,WAAW,GAAG,KAAKC,mBAAL,EAApB;;EACA,UAAMC,cAAc,GAAGF,WAAW,CAACG,KAAZ,CAAmBzC,IAAD,IAASA,IAAI,IAAIN,MAAnC,CAAvB;;EACA,QAAI,CAAC8C,cAAL,EAAqB;EACnB,aAAO,KAAP;EACD;;EAGD,WAAO,IAAInD,WAAJ,CAAgB;EACrBE,MAAAA,KADqB;EAErBC,MAAAA,KAAK,EAAE,IAFc;EAGrBE,MAAAA;EAHqB,KAAhB,CAAP;EAKD;;EAED0C,EAAAA,mBAAmB,CAAEf,KAAF,EAAS;EAC1B,UAAM3B,MAAM,GAAG,EAAf;;EACA,UAAM4C,WAAW,GAAG,KAAKI,WAAL,EAApB;;EAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,WAAW,CAACM,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;EAE3C,YAAM;EAAC3C,QAAAA,IAAD;EAAO6C,QAAAA,MAAP;EAAeC,QAAAA,SAAf;EAA0BC,QAAAA;EAA1B,UAAsC,KAAK9B,WAAL,CAAiB0B,CAAjB,CAA5C;EACA,YAAM1C,KAAK,GAAGoB,KAAK,CAACsB,CAAC,GAAG,CAAL,CAAnB;EACA,YAAMK,OAAO,GAAI/C,KAAK,KAAKgD,SAA3B;EACA,UAAIC,OAAO,GAAGF,OAAO,GAAGjD,WAAW,CAAC;EAACC,QAAAA,IAAD;EAAOC,QAAAA;EAAP,OAAD,CAAd,GAAgCA,KAArD;;EACA,UAAI4C,MAAJ,EAAY;EACVK,QAAAA,OAAO,GAAGA,OAAO,CAACC,KAAR,CAAcL,SAAd,CAAV;EACD;;EACD,UAAIE,OAAO,IAAI,CAACD,QAAhB,EAA0B;EACxBrD,QAAAA,MAAM,CAACM,IAAD,CAAN,GAAekD,OAAf;EACD;EACF;;EAED,WAAOxD,MAAP;EACD;;EAEDG,EAAAA,QAAQ,CAAEH,MAAM,GAAG,EAAX,EAAe;EACrB,QAAID,GAAG,GAAG,KAAK2D,UAAL,CAAgB1D,MAAhB,CAAV;;EACA,UAAMmC,KAAK,GAAG,KAAKwB,WAAL,CAAiB3D,MAAjB,CAAd;;EACA,QAAImC,KAAK,CAACe,MAAV,EAAkB;EAChBnD,MAAAA,GAAG,GAAI,GAAEA,GAAI,IAAGoC,KAAM,EAAtB;EACD;;EACD,WAAOpC,GAAP;EACD;;EAED2D,EAAAA,UAAU,CAAE1D,MAAF,EAAU;EAClB,UAAM;EAAC0B,MAAAA;EAAD,QAAY,IAAlB;EACA,UAAMkC,SAAS,GAAGC,oBAAO,CAACnC,OAAD,CAAzB;EACA,WAAOkC,SAAS,CAAC5D,MAAD,CAAhB;EACD;;EAED2D,EAAAA,WAAW,CAAE3D,MAAF,EAAU;EACnB,UAAM4C,WAAW,GAAG,KAAKI,WAAL,EAApB;;EAEA,UAAMZ,YAAY,GAAG,EAArB;;EACA,SAAK,MAAM,CAAC9B,IAAD,EAAOC,KAAP,CAAX,IAA4BS,MAAM,CAACC,OAAP,CAAejB,MAAf,CAA5B,EAAoD;EAClD,UAAI,CAAC4C,WAAW,CAAC1B,QAAZ,CAAqBZ,IAArB,CAAL,EAAiC;EAC/B8B,QAAAA,YAAY,CAAC9B,IAAD,CAAZ,GAAqBC,KAArB;EACD;EACF;;EAED,WAAOuD,WAAW,CAACC,SAAZ,CAAsB3B,YAAtB,CAAP;EACD;;EAEDY,EAAAA,WAAW,GAAI;EACb,WAAO,KAAKzB,WAAL,CAAiByC,GAAjB,CAAsBlD,CAAD,IAAMA,CAAC,CAACR,IAA7B,CAAP;EACD;;EAEDuC,EAAAA,mBAAmB,GAAI;EACrB,WAAO,KAAKtB,WAAL,CACJ0C,MADI,CACInD,CAAD,IAAM,CAACA,CAAC,CAACuC,QADZ,EAEJW,GAFI,CAEClD,CAAD,IAAMA,CAAC,CAACR,IAFR,CAAP;EAGD;;EA/JwB;;ECT3B,SAAS4D,OAAT,CAAkBC,IAAlB,EAAwB;EACtB,SAAO,SAASC,IAAT,CAAeC,GAAf,EAAoB;EACzB,WAAOrD,MAAM,CAACmD,IAAP,CAAYE,GAAZ,EAAiBC,MAAjB,CAAwB,CAACC,MAAD,EAASC,GAAT,KAAgB;EAC7C,UAAI,CAACL,IAAI,CAACjD,QAAL,CAAcsD,GAAd,CAAL,EAAyB;EACvBD,QAAAA,MAAM,CAACC,GAAD,CAAN,GAAcH,GAAG,CAACG,GAAD,CAAjB;EACD;;EACD,aAAOD,MAAP;EACD,KALM,EAKJ,EALI,CAAP;EAMD,GAPD;EAQD;;EAED,MAAME,QAAQ,GAAGP,OAAO,CAAC,CAAC,OAAD,EAAU,KAAV,CAAD,CAAxB;AAEA,EAAe,MAAMQ,MAAN,CAAa;EAC1B9E,EAAAA,WAAW,CAAE;EACX+E,IAAAA,MADW;EAEXC,IAAAA,SAFW;EAGXC,IAAAA,aAAa,GAAG;EAHL,GAAF,EAIR;EACD,SAAKF,MAAL,GAAc,EAAd;EACA,SAAKG,SAAL,CAAeH,MAAf;EACA,SAAKE,aAAL,GAAqBA,aAArB;EAEA,SAAKD,SAAL,GAAiB,EAAjB;;EACA,SAAK,MAAM,CAACtE,IAAD,EAAOyB,IAAP,CAAX,IAA2Bf,MAAM,CAACC,OAAP,CAAe2D,SAAf,CAA3B,EAAsD;EACpD,WAAKA,SAAL,CAAeG,IAAf,CAAoB;EAACzE,QAAAA,IAAD;EAAOyB,QAAAA;EAAP,OAApB;EACD;;EAED,SAAKiD,SAAL,GAAiB,EAAjB;EACD;;EAEDF,EAAAA,SAAS,CAAEH,MAAF,EAAU;EACjB,UAAM1D,OAAO,GAAGD,MAAM,CAACC,OAAP,CAAe0D,MAAf,CAAhB;;EACA,SAAK,MAAM,CAACrE,IAAD,EAAO2E,MAAP,CAAX,IAA6BhE,OAA7B,EAAsC;EACpCgE,MAAAA,MAAM,CAAC3E,IAAP,GAAcA,IAAd;EACA,YAAMR,KAAK,GAAG,IAAIa,KAAJ,CAAUsE,MAAV,CAAd;EACA,WAAKN,MAAL,CAAYI,IAAZ,CAAiBjF,KAAjB;EACD;EACF;;EAEDoF,EAAAA,QAAQ,CAAE/C,KAAF,EAAS;EACf,WAAO,KAAKwC,MAAL,CAAYQ,IAAZ,CAAkBrF,KAAD,IAAU;EAChC,aAAOkB,MAAM,CAACC,OAAP,CAAekB,KAAf,EAAsBY,KAAtB,CAA4B,CAAC,CAACjC,CAAD,EAAIC,CAAJ,CAAD,KAAW;EAC5C,eAAQjB,KAAK,CAACgB,CAAD,CAAL,KAAaC,CAArB;EACD,OAFM,CAAP;EAGD,KAJM,CAAP;EAKD;;EAEDqE,EAAAA,cAAc,CAAE9E,IAAF,EAAQ;EACpB,UAAMR,KAAK,GAAG,KAAKoF,QAAL,CAAc;EAAC5E,MAAAA;EAAD,KAAd,CAAd;;EACA,QAAI,CAACR,KAAL,EAAY;EACV,YAAM,IAAIY,KAAJ,CAAW,kBAAiBJ,IAAK,EAAjC,CAAN;EACD;;EACD,WAAOR,KAAP;EACD;;EAOD6B,EAAAA,KAAK,CAAE9B,KAAF,EAAS;EACZA,IAAAA,KAAK,GAAG,KAAKwF,eAAL,CAAqBxF,KAArB,CAAR;EACA,UAAMyF,KAAK,GAAGb,QAAQ,CAAC5E,KAAD,CAAtB;;EACA,UAAMK,QAAQ,GAAG,KAAKqF,MAAL,CAAY1F,KAAZ,CAAjB;;EACA,UAAMI,QAAQ,GAAG,KAAKuF,eAAL,CAAqB;EAACtF,MAAAA,QAAD;EAAWoF,MAAAA;EAAX,KAArB,CAAjB;;EACA,QAAIrF,QAAJ,EAAc;EACZA,MAAAA,QAAQ,CAACG,UAAT,CAAoB;EAACF,QAAAA;EAAD,OAApB;EACA,aAAOD,QAAP;EACD,KAHD,MAGO;EACL,aAAOC,QAAP;EACD;EACF;;EAEDmF,EAAAA,eAAe,CAAExF,KAAF,EAAS;EACtB,YAAQ4F,IAAI,CAAC5F,KAAD,CAAZ;EACE,WAAK6F,MAAL;EACE,YAAI7F,KAAK,CAACmC,OAAN,CAAc,GAAd,MAAuB,CAAC,CAA5B,EAA+B;EAC7B,iBAAO;EAACjC,YAAAA,GAAG,EAAEF;EAAN,WAAP;EACD,SAFD,MAEO;EACL,iBAAO;EAACC,YAAAA,KAAK,EAAE;EAACQ,cAAAA,IAAI,EAAET;EAAP;EAAR,WAAP;EACD;;EACH,WAAKmB,MAAL;EACE,YAAInB,KAAK,CAACS,IAAV,EAAgB;EACd,iBAAO;EAACR,YAAAA,KAAK,EAAED;EAAR,WAAP;EACD,SAFD,MAEO;EACL,iBAAOA,KAAP;EACD;;EACH;EACE,cAAM,IAAIa,KAAJ,CAAU,eAAV,CAAN;EAdJ;EAgBD;;EAED6E,EAAAA,MAAM,CAAE1F,KAAF,EAAS;EAEb,UAAM;EAACE,MAAAA;EAAD,QAAQF,KAAd;;EACA,QAAIE,GAAG,IAAIA,GAAG,CAAC4B,KAAJ,CAAU,cAAV,CAAX,EAAsC;EACpC,aAAO,IAAIhC,WAAJ,CAAgB;EACrBM,QAAAA,QAAQ,EAAE,IADW;EAErBJ,QAAAA,KAFqB;EAGrBE,QAAAA;EAHqB,OAAhB,CAAP;EAKD;;EAED,QAAI4B,KAAK,GAAG,IAAZ;;EACA,SAAK,MAAMgE,CAAX,IAAgB,KAAKhB,MAArB,EAA6B;EAC3BhD,MAAAA,KAAK,GAAGgE,CAAC,CAAChE,KAAF,CAAQ9B,KAAR,CAAR;;EACA,UAAI8B,KAAJ,EAAW;EACT;EACD;EACF;;EAED,WAAOA,KAAP;EACD;;EAED6D,EAAAA,eAAe,CAAE;EACftF,IAAAA,QADe;EAEfoF,IAAAA,KAFe;EAGfM,IAAAA,QAAQ,GAAG,IAHI;EAIfC,IAAAA,OAAO,GAAG,IAJK;EAKfC,IAAAA,aAAa,GAAG,CALD;EAMfC,IAAAA,OAAO,GAAG;EANK,GAAF,EAOZ;EACD,UAAM;EAAClB,MAAAA;EAAD,QAAkB,IAAxB;;EACA,QAAIiB,aAAa,IAAIjB,aAArB,EAAoC;EAClC,YAAM,IAAInE,KAAJ,CAAW,+CAA8CmE,aAAc,GAAvE,CAAN;EACD;;EAED,aAASmB,SAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;EACxB,YAAM;EAACnC,QAAAA;EAAD,UAAcoC,IAApB;EACA,aAAQpC,SAAS,CAACkC,CAAD,CAAT,KAAiBlC,SAAS,CAACmC,CAAD,CAAlC;EACD;;EAKD,QAAIL,OAAO,IAAID,QAAf,EAAyB;EACvB,YAAMQ,UAAU,GAAIP,OAAO,CAAC/F,KAAR,KAAkB8F,QAAQ,CAAC9F,KAA/C;EACA,YAAMuG,WAAW,GAAGL,SAAS,CAACH,OAAO,CAAC7F,MAAT,EAAiB4F,QAAQ,CAAC5F,MAA1B,CAA7B;;EACA,UAAIoG,UAAU,IAAIC,WAAlB,EAA+B;EAC7B,eAAOT,QAAP;EACD;EACF;;EAED,QAAI,CAACC,OAAL,EAAc;EACZA,MAAAA,OAAO,GAAG3F,QAAV;EACA6F,MAAAA,OAAO,GAAG,CAAC7F,QAAD,CAAV;EACD;;EAED,QAAI2F,OAAO,CAAC5F,QAAZ,EAAsB;EACpB,aAAO4F,OAAP;EACD;;EAED,QAAIS,IAAI,GAAG,KAAX;;EACA,QAAIT,OAAO,IAAIA,OAAO,CAAC/F,KAAR,CAAcG,QAA7B,EAAuC;EACrCqG,MAAAA,IAAI,GAAGT,OAAO,CAAC/F,KAAR,CAAcG,QAAd,CAAuB4F,OAAvB,CAAP;EACD;;EAED,QAAI,CAACS,IAAL,EAAW;EACT,WAAK,MAAM;EAACvE,QAAAA;EAAD,OAAX,IAAqB,KAAK6C,SAA1B,EAAqC;EAEnC0B,QAAAA,IAAI,GAAGvE,IAAI,CAAC8D,OAAD,CAAX;;EACA,YAAIS,IAAJ,EAAU;EACR;EACD;EACF;EACF;;EAED,QAAIA,IAAJ,EAAU;EAERV,MAAAA,QAAQ,GAAGC,OAAX;EACAS,MAAAA,IAAI,GAAG,KAAKjB,eAAL,CAAqBiB,IAArB,CAAP;EACAT,MAAAA,OAAO,GAAG,KAAKN,MAAL,cAAgBe,IAAhB,EAAyBhB,KAAzB,EAAV;;EACA,UAAI,CAACO,OAAL,EAAc;EACZ,cAAM,IAAInF,KAAJ,CAAW,gCAA+B4F,IAAK,EAA/C,CAAN;EACD;;EACDP,MAAAA,OAAO,CAAChB,IAAR,CAAac,OAAb;EACAC,MAAAA,aAAa;EACb,aAAO,KAAKN,eAAL,CAAqB;EAACtF,QAAAA,QAAD;EAAW0F,QAAAA,QAAX;EAAqBC,QAAAA,OAArB;EAA8BC,QAAAA,aAA9B;EAA6CC,QAAAA,OAA7C;EAAsDT,QAAAA;EAAtD,OAArB,CAAP;EACD,KAXD,MAWO,IAAIQ,aAAa,GAAG,CAApB,EAAuB;EAC5B,aAAOD,OAAP;EACD,KAFM,MAEA;EACL,aAAO,KAAP;EACD;EACF;;EAEDU,EAAAA,QAAQ,CAAEC,QAAF,EAAY;EAClB,SAAKxB,SAAL,CAAeD,IAAf,CAAoByB,QAApB;EACD;;EAEDC,EAAAA,EAAE,CAAE5G,KAAF,EAAS;EACT,UAAM8B,KAAK,GAAG,KAAKA,KAAL,CAAW9B,KAAX,CAAd;EACA,UAAM;EAACE,MAAAA;EAAD,QAAQ4B,KAAd;;EACA,SAAK,MAAM6E,QAAX,IAAuB,KAAKxB,SAA5B,EAAuC;EACrCwB,MAAAA,QAAQ,CAACzG,GAAD,CAAR;EACD;EACF;;EAvLyB;;;;;;;;;;"}